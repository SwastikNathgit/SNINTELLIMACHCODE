# -*- coding: utf-8 -*-
"""IBM-REGRESSION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mEWnkzKMVFh-zBrH9P0v4cRD_kEQBvTh
"""

import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
# %matplotlib inline

print("Execution successful")

!wget -O FuelConsumption.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv
print("Download Successful")

df=pd.read_csv("FuelConsumption.csv")
df.head()

df.describe()

cdf=df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
cdf.head(9)

viz=cdf[['CYLINDERS', 'ENGINESIZE', 'CO2EMISSIONS', 'FUELCONSUMPTION_COMB']]
viz.hist()
plt.show()

plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS, color='gray')
plt.xlabel("Fuel Consumption")
plt.ylabel("Emission")
plt.show

plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS, color='red')
plt.xlabel("Number of Cylinders")
plt.ylabel("Emission")
plt.show()

msk=np.random.rand(len(df)) <0.8
train=cdf[msk]
test=cdf[msk]
print("Execution Successful")

from sklearn import linear_model
regression=linear_model.LinearRegression()

train_x=np.asanyarray(train[['ENGINESIZE']])
train_y=np.asanyarray(train[['CO2EMISSIONS']])

regression.fit(train_x, train_y)

print ("Coeficients: ", regression.coef_)
print("Intercept: ", regression.intercept_)

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS, color='black')
plt.plot(train_x, regression.coef_[0][0]*train_x+regression.intercept_[0], '-r')
plt.xlabel("ENGINE SIZE")
plt.ylabel("Emission")

"""Mean Absolute Error (MAE)= 1/n (Summation(Xi - x))
MEAN SQAURED ERROR(MSE)=
"""

from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['ENGINESIZE']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])
test_y_hat = regression.predict(test_x)

print("MEAN ABSOLUTE ERROR %.2f" % np.mean(np.absolute(test_y_hat - test_y)))
print("RESIDUAL SUM OF SQUARES %.2f" % np.mean((test_y_hat - test_y)**2))
print ("execution Successful")

from sklearn.metrics import r2_score

test_m=np.asanyarray(test[['CYLINDERS']])
test_n=np.asanyarray(test[['CO2EMISSIONS']])

test_n_hat=regression.predict(test_n)

print ("ROOT MEAN SQUARED ERROR: %.2f" % np.mean(np.absolute(np.sqrt(test_n_hat - test_n))))
print ("Execution Successful")

from sklearn import linear_model
regress=linear_model.LinearRegression()

train_l=np.asanyarray(train[['FUELCONSUMPTION_COMB']])
train_m=np.asanyarray(train[['CO2EMISSIONS']])

regress.fit(train_l, train_m)

print("Coefficients: ", regress.coef_)
print ("Intercept: ", regress.intercept_)
print("EXECUTION SUCCESS")

plt.scatter(train_l, train_m , color='green')
plt.plot(train_l, regress.coef_[0][0]*train_l+regress.intercept_[0])
plt.xlabel("FUEL CONSUMPTION COMBINATION")
plt.ylabel("CO2 EMISSIONS")
plt.show()

from sklearn.metrics import r2_score

test_l=np.asanyarray(test[['FUELCONSUMPTION_COMB']])
test_m=np.asanyarray(test[['CO2EMISSIONS']])

test_m_hat=regress.predict(test_l)

print("MEAN ABSOLUTE ERROR: %.2f " % np.mean(np.absolute(test_m_hat - test_m)))